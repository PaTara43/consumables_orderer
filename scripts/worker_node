#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Standart, System and Third party

# ROS
import rospy
from std_msgs.msg import String
from std_srvs.srv import Empty

# AIRA
from robonomics_liability.msg import Liability


class WorkerNode:
    # TODO: need an objective messages collector and empty objective (by new liability) starter
    def __init__(self):
        rospy.init_node('worker')
        rospy.loginfo('Launching worker node...')

        rospy.Subscriber('liability/current', Liability, self.process) # liability without objective

        self.pub = rospy.Publisher('~data', String, queue_size=128)

        rospy.wait_for_service('liability/finish')
        self.finish = rospy.ServiceProxy('liability/finish', Empty)

        rospy.loginfo('Worker node launched.')

    def process(self, liability):
        rospy.loginfo('Starting process...')
        rospy.sleep(5) # wait for recorder from liability node

        # MAKE YOUR PROCESS HERE
        self.pub.publish(String(data='Result data')) 

        self.finish()
        rospy.loginfo('Process complete.')
       
    def spin(self):
        rospy.spin()


if __name__ == '__main__':
    WorkerNode().spin()
