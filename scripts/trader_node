#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Standart, System and Third Party
from web3 import Web3, HTTPProvider

# ROS
import rospy

# AIRA
from robonomics_msgs.msg import Offer, Demand
from ethereum_common.msg import Address, UInt256
from ethereum_common.srv import Accounts, BlockNumber


class TraderNode:
    def __init__(self):
        rospy.init_node('trader')
        rospy.loginfo('Launching trader node...')

        rospy.wait_for_service('/eth/current_block')
        rospy.wait_for_service('/eth/accounts')
        self.accounts = rospy.ServiceProxy('/eth/accounts', Accounts)()
        rospy.loginfo(str(self.accounts)) # AIRA ethereum addresses

        # TODO: approve

        self.signing_demand = rospy.Publisher('/liability/infochan/eth/signing/demand', Demand, queue_size=128)
        self.signing_offer = rospy.Publisher('/liability/infochan/eth/signing/offer', Offer, queue_size=128)

        rospy.Subscriber('/liability/infochan/incoming/demand', Demand, self.on_incoming_demand)
        rospy.Subscriber('/liability/infochan/incoming/offer', Offer, self.on_incoming_offer)

        rospy.loginfo('Trader node launched.')


    def on_incoming_demand(self, incoming_demand: Demand):
        rospy.loginfo('Incoming demand %s...', str(incoming_bid))
        if (incoming_demand.model == rospy.get_param('~model') and
            incoming_demand.token == rospy.get_param('~token')):
            rospy.loginfo('For my model and token!')
            # self.act(incoming_demand) # reactive strategy
        else:
            rospy.loginfo('Not fits my model or token, skip it.')


    def on_incoming_offer(self, incoming_offer: Offer):
        rospy.loginfo('Incoming offer %s...', str(incoming_offer))
        if (incoming_offer.model == rospy.get_param('~model') and
            incoming_offer.token == rospy.get_param('~token')):
            rospy.loginfo('For my model and token!')
            # self.act(incoming_offer) # reactive strategy
        else:
            rospy.loginfo('Not fits my model or token, skip it.')


    def act(self, incoming): # TODO: need better strategy configurator
        # self.make_ask(incoming.objective, incoming.cost) # act reactively
        self.make_offer(incoming.objective, incoming.cost)


    def make_offer(self, objective, cost):
        rospy.loginfo('Making offer...')

        offer = Offer()
        offer.model = rospy.get_param('~model')
        offer.objective = objective
        offer.token = rospy.get_param('~token')
        offer.cost = cost
        offer.lighthouse = rospy.get_param('~lighthouse')
        offer.validator = '0x0000000000000000000000000000000000000000'
        offer.lighthouseFee = 0
        rospy.wait_for_service('/eth/current_block')
        offer.deadline = rospy.ServiceProxy('/eth/current_block', BlockNumber)() + rospy.get_param('~bid_lifetime')

        self.signing_offer.publish(offer)
        rospy.loginfo(offer)


    def make_demand(self, objective, cost):
        rospy.loginfo('Making demand...')
        
        demand = Demand()
        demand.model = rospy.get_param('~model')
        demand.objective = objective
        demand.token = rospy.get_param('~token')
        demand.cost = cost
        demand.validatorFee = 0
        demand.validator = '0x0000000000000000000000000000000000000000'
        demand.deadline = rospy.ServiceProxy('/eth/current_block', BlockNumber)() + rospy.get_param('~bid_lifetime')

        self.signing_demand.publish(demand)
        rospy.loginfo(demand)


    def spin(self):
        rospy.spin()


if __name__ == '__main__':
    TraderNode().spin()
